@page "/Createbalance"
@inject IJSRuntime JSRuntime
@rendermode InteractiveAuto

<style>
    form {
        margin-top: 20px;
        background-color: #181818;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin-bottom: 20px; /* Add margin-bottom */
    }

    label {
        color: #ccc;
        font-weight: bold;
        margin-bottom: 8px;
    }

    input[type="text"],
    input[type="number"],
    textarea,
    input[type="file"],
    button,
    input[type="password"] {
        width: 100%;
        padding: 10px;
        border-radius: 5px;
        border: 1px solid #ccc;
        margin-bottom: 15px;
        box-sizing: border-box;
        background-color: #000;
        color: white;
        caret-color: white;
        border-color: #666;
    }

    button {
        background-color: #192734;
        color: white;
        border: none;
        cursor: pointer;
    }
</style>

<h1>Create Claimable Balance with a Custom Token</h1>

<form id="claimableBalanceForm">
    <label for="sourceSecretKey">Source Account Secret Key:</label>
    <input type="text" id="sourceSecretKey" required><br><br>
    <label for="recipientAccount">Recipient Account:</label>
    <input type="text" id="recipientAccount" required><br><br>
    <label for="tokenCode">Token Code:</label>
    <input type="text" id="tokenCode" required><br><br>
    <label for="tokenIssuer">Token Issuer:</label>
    <input type="text" id="tokenIssuer" required><br><br>
    <label for="tokenAmountsecret">Token Amount:</label>
    <input type="number" id="tokenAmountsecret" required><br><br>
    <button type="submit">Create Claimable Balance</button>
</form>
<div id="message">@Message</div>

@code {
    private FormDataModel FormData = new FormDataModel();
    private string Message;

    private async Task HandleSubmit()
    {
        try
        {
            var result = await JSRuntime.InvokeAsync<string>(
                "createClaimableBalance",
                FormData.SourceSecretKey,
                FormData.RecipientAccount,
                FormData.TokenCode,
                FormData.TokenIssuer,
                FormData.tokenAmountsecret.ToString());

            Message = $"Claimable balance created successfully for {FormData.tokenAmountsecret} {FormData.TokenCode}.";
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error creating claimable balance: {ex.Message}");
            Message = "Failed to create claimable balance. Please try again.";
        }
    }

    public class FormDataModel
    {
        public string SourceSecretKey { get; set; }
        public string RecipientAccount { get; set; }
        public string TokenCode { get; set; }
        public string TokenIssuer { get; set; }
        public decimal tokenAmountsecret { get; set; }
    }
}

@{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/stellar-sdk/11.2.2/stellar-sdk.js"></script>
    <script src="./_content/pakana.stellar.components/js/createClaimableBal.js"></script>

}