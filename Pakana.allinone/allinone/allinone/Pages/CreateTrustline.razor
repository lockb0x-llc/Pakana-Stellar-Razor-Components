@* @page "/Trust"
@rendermode InteractiveAuto
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Components.Forms

<h1>Create Trustline</h1>
<EditForm Model="@this" OnValidSubmit="HandleValidSubmit" FormName="CreateTrustlineForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="assetCode">Asset Code:</label>
        <InputText id="assetCode" @bind-Value="assetCode" required></InputText><br><br>
    </div>
    <div>
        <label for="issuerAccount">Issuer Account:</label>
        <InputText id="issuerAccount" @bind-Value="issuerAccount" required></InputText><br><br>
    </div>
    <div>
        <label for="destinationAccount">Destination Account:</label>
        <InputText id="destinationAccount" @bind-Value="destinationAccount" required></InputText><br><br>
    </div>
    <div>
        <label for="secretKey">Destination Account Secret Key:</label>
        <InputText id="secretKey" @bind-Value="secretKey" required></InputText><br><br>
    </div>
    <button type="submit">Create Trustline</button>
</EditForm>

@if (!string.IsNullOrEmpty(message))
{
    <div id="message">@message</div>
}

@code {
    private string assetCode;
    private string issuerAccount;
    private string destinationAccount;
    private string secretKey;
    private string message;

    private async Task HandleValidSubmit()
    {
        var createTrustlineScript = @"
            const server = new StellarSdk.Horizon.Server('https://horizon-testnet.stellar.org');
            const sourceKeys = StellarSdk.Keypair.fromSecret('" + secretKey + @"');
            server.loadAccount(sourceKeys.publicKey())
            .then(account => {
                const transaction = new StellarSdk.TransactionBuilder(account, {
                    fee: StellarSdk.BASE_FEE,
                    networkPassphrase: StellarSdk.Networks.TESTNET
                })
                .addOperation(StellarSdk.Operation.changeTrust({
                    asset: new StellarSdk.Asset('" + assetCode + @"', '" + issuerAccount + @"'),
                    source: '" + destinationAccount + @"'
                }))
                .setTimeout(30)
                .build();
                transaction.sign(sourceKeys);
                return server.submitTransaction(transaction);
            })
            .then(result => {
                console.log('Trustline created successfully:', result);
                DotNet.invokeMethodAsync('MyStellarApp', 'UpdateMessage', `Trustline for asset '${" + assetCode + @"}' created successfully.`);
            })
            .catch(error => {
                console.error('Error creating trustline:', error);
                DotNet.invokeMethodAsync('MyStellarApp', 'UpdateMessage', 'Failed to create trustline. Please try again.');
            });
        ";

        await JSRuntime.InvokeVoidAsync("eval", createTrustlineScript);
    }

    [JSInvokable]
    public void UpdateMessage(string newMessage)
    {
        message = newMessage;
    }
}
 *@


@page "/Trust"
@rendermode InteractiveAuto
@inject IJSRuntime JSRuntime

<h1>Create Trustline</h1>
<EditForm Model="@this" OnValidSubmit="HandleValidSubmit" FormName="CreateTrustlineForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="assetCode">Asset Code:</label>
        <InputText id="assetCode" @bind-Value="assetCode" required></InputText><br><br>
    </div>
    <div>
        <label for="issuerAccount">Issuer Account:</label>
        <InputText id="issuerAccount" @bind-Value="issuerAccount" required></InputText><br><br>
    </div>
    <div>
        <label for="destinationAccount">Destination Account:</label>
        <InputText id="destinationAccount" @bind-Value="destinationAccount" required></InputText><br><br>
    </div>
    <div>
        <label for="secretKey">Destination Account Secret Key:</label>
        <InputText id="secretKey" @bind-Value="secretKey" required></InputText><br><br>
    </div>
    <button type="submit">Create Trustline</button>
</EditForm>

@if (!string.IsNullOrEmpty(message))
{
    <div id="message">@message</div>
}

@code {
    private string assetCode = "USD";
    private string issuerAccount = "GDUKMGUGDQWSQ3DRY5E7D3ZPHDSFDPZOJKKGOV5ABLMCIDG6ASE4VRUB";
    private string destinationAccount = "GC4DJYMFQFI4L6QHV7H3YSDG5E2B3OW2IGZQQRFKNYSVBZXG3X64F2W4";
    private string secretKey = "SCZ6JIZDJMNZ4OQJAJBH5JFBQ4UWQMI2V3SLEQG67YRJPKRYQLT7TIT5";
    private string message;

    private async Task HandleValidSubmit()
    {
        // This script is a placeholder. You should replace it with your actual initialization logic.
        var createTrustlineScript = $@"
            alert('Submitting form with: Asset Code={assetCode}, Issuer Account={issuerAccount}, Destination Account={destinationAccount}, Secret Key={secretKey}');
            // Actual Stellar SDK interactions should go here.
            // For testing, we use a simple alert to simulate the process.
        ";

        await JSRuntime.InvokeVoidAsync("eval", createTrustlineScript);

        // Simulated response after "submitting" the transaction
        UpdateMessage($"Simulated: Trustline for asset '{assetCode}' supposed to be created successfully.");
    }

    [JSInvokable]
    public void UpdateMessage(string newMessage)
    {
        message = newMessage;
    }
}
